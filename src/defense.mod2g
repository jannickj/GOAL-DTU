module defense{
	knowledge{
		needToParry :- currentPos(Here), enemyTeam(T), visibleEntity(ID,Here,T,normal), dangerousEnemy(ID), !.
		needToParry :- lastActionResult(failed_attacked).
	}

	program{
		% Enemy on your position and the agent can parry
		if bel(not(role('Explorer')), not(role('Inspector')), needToParry) then defenseParry.
		
		% Wait for the Saboteur to beat you for parry achievements
		if bel(not(role('Explorer')), not(role('Inspector')), maxEnergy(E), not(energy(E)), !, neighbour(There),
			visibleEntity(Id, There, Team, normal), enemyTeam(Team), inspectedEnemy(Id, 'Saboteur')) then {
			if bel(not(lastAction(parry))) then parry.
			if bel(lastAction(parry), not(lastActionResult(useless))) then parry.
			if bel(lastActionResult(failed_attacked)) then parry.
			if true then recharge.
		}
			
		% If you cannot parry (and is not swarming) then just run away
		if not(goal(swarm)) then defenseFlee.
	}
}

module defenseParry{
	program{
		% randomly pick flee or parry when last parry was useless.
		if bel(lastAction(parry), lastActionResult(useless)) then randomDefense.		
		if true then parry.
		if true then recharge.
	}
}

module randomDefense{
	program{
		% Keep 75% chance to parry, 25% to flee
		if bel(randomFloat(R), R > 0.25) then {
			if true then parry.
			if true then recharge.
		}
		if not(goal(swarm)) then defenseFlee.
	}
}

module defenseFlee{
	program{
		% run away if needed.		
		if bel( currentPos(Here), not(needSurvey(Here))) then {
			% to a safe spot.
			if bel( neighbour(N), safePos(N)) then advancedGoto(N).
			% to a safer spot which isn't where I was last step.
			if bel( neighbour(N), not((visibleEntity(_, N, Team, _), enemyTeam(Team))), not(lastPos(N))) then advancedGoto(N).
			% to a safer spot.
			if bel( neighbour(N), not((visibleEntity(_, N, Team, _), enemyTeam(Team)))) then advancedGoto(N).
		}
		
		% max edge Weight is 9.
		if bel( energyGE(9), currentPos(Here) ) then {
			% to a safe spot.
			if bel( visibleEdge(Here,N), safePos(N)) then advancedGoto(N).
			% to a safer spot which isn't where I was last step.
			if bel( visibleEdge(Here,N), not((visibleEntity(_, N, Team, _), enemyTeam(Team))), not(lastPos(N))) then advancedGoto(N).
			% to a safer spot.
			if bel( visibleEdge(Here,N), not((visibleEntity(_, N, Team, _), enemyTeam(Team)))) then advancedGoto(N).			
		}
			
		if true then recharge.
	}
}
